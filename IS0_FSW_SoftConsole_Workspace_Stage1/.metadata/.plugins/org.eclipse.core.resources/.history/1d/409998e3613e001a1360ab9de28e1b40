
#ifndef _PWR_H
	#define _PWR_H


#include "Seq_ops/main_seq.h"

#undef  GLOBAL
#ifdef _PWR_C
#define GLOBAL
#else
#define GLOBAL  extern
#endif

#define MASTER_SER_ADDR     			((uint8_t)0x21)	// Address of Master, need to change later on basis of constrains(if present)

#define	PWR_FG1_SLAVE_C0					((uint8_t)0x36)	// 0 0110110 -> Battery Gauge Slave	I2C_C0
#define PWR_VC1_SLAVE_C0 					((uint8_t)0x40)	// 0 1000000 -> DAXSS - CH3, CDH - CH1 	I2C_C0
// #define PWR_VC3_SLAVE_C0 					((uint8_t)0x41)	// 0 1000001 -> VC sensor of o/p LM5118 BM, o/p LM5118 SP and input of Sys_reset

#define PWR_VC0_SLAVE_C1 					((uint8_t)0x40)	// 0 1000000 -> VC sensor for 3 Solar Panels I2C_C1
#define PWR_VC2_SLAVE_C1 					((uint8_t)0x41)	// 0 1000001 -> VC sensor of SP Buck Output, Battery, Bus/Load - 	I2C_C1
#define PWR_ADC_SLAVE_C1					((uint8_t)0x20)	// 0 0100000 -> ADC slave address	I2C_C1
#define	PWR_FG2_SLAVE_C1					((uint8_t)0x36)	// 0 0110110 -> Battery Gauge Slave	I2C_C1

#define	PWR_FG3_SLAVE_NC					((uint8_t)0x36)	// 0 0110110 -> Battery Gauge Slave	I2C_NC
#define PWR_VC4_SLAVE_NC					((uint8_t)0x42)	// 0 1000010 -> VC sensor for Battery heater, SBand, UHF --
#define PWR_VC5_SLAVE_NC					((uint8_t)0x41)	// 0 1000001 -> VC sensor for ADCS, CIP, GPS 3.3V --
#define PWR_VC6_SLAVE_NC					((uint8_t)0x43)	// 0 1000011 -> VC sensor for GPS 12 x2  --

//Not needed if we pass in Beacon_pack directly into the Slave_Read functions
// #define EPS_SLAVE_CONFIG_SIZE			32		//random for now
// #define EPS_DATA_SIZE							68 + EPS_SLAVE_CONFIG_SIZE
#define EPS_VC_DATA_SIZE					2
#define EPS_FG_DATA_SIZE					2
#define EPS_ADC_DATA_SIZE					2

/***************************************************************************
 *
 * Defining Register Map for VC sensors
 */

#define	PWR_VC_CONFIGURATION			((uint8_t)0x00)		// 16 bits Configuration Register;			OPs -> R/Wnot
															// Reset Cond -> 0x7127
#define	PWR_VC_CH1_SHUNT_VOLTAGE		((uint8_t)0x01)		// 16 bits Channel 1 Shunt Voltage reading;	Ops -> R
#define	PWR_VC_CH1_BUS_VOLTAGE			((uint8_t)0x02)		// 16 bits Channel 1 Bus Voltage reading;	Ops -> R
#define	PWR_VC_CH2_SHUNT_VOLTAGE		((uint8_t)0x03)		// 16 bits Channel 2 Shunt Voltage reading;	Ops -> R
#define	PWR_VC_CH2_BUS_VOLTAGE			((uint8_t)0x04)		// 16 bits Channel 2 Bus Voltage reading;	Ops -> R
#define	PWR_VC_CH3_SHUNT_VOLTAGE		((uint8_t)0x05)		// 16 bits Channel 3 Shunt Voltage reading;	Ops -> R
#define	PWR_VC_CH3_BUS_VOLTAGE			((uint8_t)0x06)		// 16 bits Channel 3 Bus Voltage reading;	Ops -> R
#define	PWR_VC_CH1_CRIC_ALERT_LIMIT		((uint8_t)0x07)		// 16 bits Channel 1 Critical Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_CH1_WARN_ALERT_LIMIT		((uint8_t)0x08)		// 16 bits Channel 1 Warning Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_CH2_CRIC_ALERT_LIMIT		((uint8_t)0x09)		// 16 bits Channel 1 Critical Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_CH2_WARN_ALERT_LIMIT		((uint8_t)0x0A)		// 16 bits Channel 1 Warning Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_CH3_CRIC_ALERT_LIMIT		((uint8_t)0x0B)		// 16 bits Channel 1 Critical Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_CH3_WARN_ALERT_LIMIT		((uint8_t)0x0C)		// 16 bits Channel 1 Warning Alert Limit	Ops	-> R/Wnot
#define	PWR_VC_SHUNT_VOLT_SUM			((uint8_t)0x0D)		// 16 bits Contains the summed value selected channel	Ops -> R
#define	PWR_VC_SHUNT_VOLT_SUM_LIMIT		((uint8_t)0x0E)		// 16 bits Contains limit of summed value selected channel	Ops -> R/Wnot
#define	PWR_VC_MASK_ENABLE				((uint8_t)0x0F)		// 16 bits Alert Config, alert status indication and summation control
															// and status.	Ops -> R/Wnot
#define	PWR_VC_POWER_VALID_UPP_LIMIT	((uint8_t)0x10)		// 16 bits Limit value to compare upper all bus voltage to determine Power Valid Ops -> R/Wnot
#define	PWR_VC_POWER_VALID_LOW_LIMIT	((uint8_t)0x11)		// 16 bits Limit value to compare lower all bus voltage to determine Power Valid Ops -> R/Wnot
#define	PWR_VC_MANUFAC_ID				((uint8_t)0xFE)		// 16 bits Manufacture ID; Ops -> R
#define	PWR_VC_DIE_ID					((uint8_t)0xFF)		// 16 bits Die ID; Ops -> R

/***************************************************************************/


/***************************************************************************
 *
 * Defining Masks for Configuration Register  and Mask/Enable Register of VC sensors
 */

// Masks of Configuration Register
#define PWR_VC_MASK_CONFIG_RESET 		((uint16_t)0x8000)	// 1000-0000-0000-0000 	(Default->0x0000)
#define PWR_VC_MASK_CONFIG_ENABLE_CH1	((uint16_t)0x4000)	// 0100-0000-0000-0000	(* Default)
#define PWR_VC_MASK_CONFIG_ENABLE_CH2	((uint16_t)0x2000)	// 0010-0000-0000-0000	(* Default)
#define PWR_VC_MASK_CONFIG_ENABLE_CH3	((uint16_t)0x1000)	// 0001-0000-0000-0000	(* Default)

#define PWR_VC_MASK_CONFIG_AVG_MODE_0	((uint16_t)0x0000)	// 0000-0000-0000-0000	(* Default)
#define PWR_VC_MASK_CONFIG_AVG_MODE_1	((uint16_t)0x0200)	// 0000-0010-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_2	((uint16_t)0x0400)	// 0000-0100-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_3	((uint16_t)0x0600)	// 0000-0110-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_4	((uint16_t)0x0800)	// 0000-1000-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_5	((uint16_t)0x0100)	// 0000-1010-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_6	((uint16_t)0x0C00)	// 0000-1100-0000-0000
#define PWR_VC_MASK_CONFIG_AVG_MODE_7	((uint16_t)0x0E00)	// 0000-1110-0000-0000

#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_0	((uint16_t)0x0000)	// 0000-0000-0000-0000	140 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_1	((uint16_t)0x0040)	// 0000-0000-0100-0000	204 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_2	((uint16_t)0x0080)	// 0000-0000-1000-0000	332 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_3	((uint16_t)0x00C0)	// 0000-0000-1100-0000	588 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_4	((uint16_t)0x0100)	// 0000-0001-0000-0000	1100 microseconds (* Default)
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_5	((uint16_t)0x0140)	// 0000-0001-0100-0000	2116 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_6	((uint16_t)0x0180)	// 0000-0001-1000-0000	4156 microseconds
#define PWR_VC_MASK_CONFIG_BUS_CONV_TIME_7	((uint16_t)0x01C0)	// 0000-0001-1100-0000	8244 microseconds

#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_0	((uint16_t)0x0000)	// 0000-0000-0000-0000	140 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_1	((uint16_t)0x0008)	// 0000-0000-0000-1000	204 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_2	((uint16_t)0x0010)	// 0000-0000-0001-0000	332 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_3	((uint16_t)0x0018)	// 0000-0000-0001-1000	588 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_4	((uint16_t)0x0020)	// 0000-0000-0010-0000	1100 microseconds (* Default)
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_5	((uint16_t)0x0028)	// 0000-0000-0010-1000	2116 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_6	((uint16_t)0x0030)	// 0000-0000-0011-0000	4156 microseconds
#define PWR_VC_MASK_CONFIG_SH_CONV_TIME_7	((uint16_t)0x0038)	// 0000-0000-0011-1000	8244 microseconds

#define PWR_VC_MASK_CONFIG_MODE_0		((uint16_t)0x0000)	// 0000-0000-0000-0000 Power Down
#define PWR_VC_MASK_CONFIG_MODE_1		((uint16_t)0x0001)	// 0000-0000-0000-0001 Shunt Voltage. Single Shot
#define PWR_VC_MASK_CONFIG_MODE_2		((uint16_t)0x0002)	// 0000-0000-0000-0010 Bus Voltage. Single Shot
#define PWR_VC_MASK_CONFIG_MODE_3		((uint16_t)0x0003)	// 0000-0000-0000-0011 Bus and Shunt Voltage. Single Shot
#define PWR_VC_MASK_CONFIG_MODE_4		((uint16_t)0x0004)	// 0000-0000-0000-0100 Power Down
#define PWR_VC_MASK_CONFIG_MODE_5		((uint16_t)0x0005)	// 0000-0000-0000-0101 Shunt Voltage, Continuous
#define PWR_VC_MASK_CONFIG_MODE_6		((uint16_t)0x0006)	// 0000-0000-0000-0110 Bus Voltage, Continuous
#define PWR_VC_MASK_CONFIG_MODE_7		((uint16_t)0x0007)	// 0000-0000-0000-0111 Bus and Shunt Voltage. Continuous (* Default)

// Masks of Mask/Enable Register
#define PWR_VC_MASK_MASKEN_SCC1		((uint16_t)0x4000)	// 0100-0000-0000-0000	Summation Channel Control Ch1.
#define PWR_VC_MASK_MASKEN_SCC2		((uint16_t)0x2000)	// 0010-0000-0000-0000	Summation Channel Control Ch2.
#define PWR_VC_MASK_MASKEN_SCC3		((uint16_t)0x1000)	// 0001-0000-0000-0000	Summation Channel Control Ch3.
#define PWR_VC_MASK_MASKEN_WEN		((uint16_t)0x0800)	// 0000-1000-0000-0000	Warning alert latch enable.
#define PWR_VC_MASK_MASKEN_CEN		((uint16_t)0x0400)	// 0000-0100-0000-0000	Critical alert latch enable.
#define PWR_VC_MASK_MASKEN_CF1		((uint16_t)0x0200)	// 0000-0010-0000-0000	Critical alert flag indicator Ch1.
#define PWR_VC_MASK_MASKEN_CF2		((uint16_t)0x0100)	// 0000-0001-0000-0000	Critical alert flag indicator Ch2.
#define PWR_VC_MASK_MASKEN_CF3		((uint16_t)0x0080)	// 0000-0000-1000-0000	Critical alert flag indicator Ch3.
#define PWR_VC_MASK_MASKEN_SF		((uint16_t)0x0040)	// 0000-0000-0100-0000	Summation alert flag indicator Ch3.
#define PWR_VC_MASK_MASKEN_WF1		((uint16_t)0x0020)	// 0000-0000-0010-0000	Warning alert flag indicator Ch1.
#define PWR_VC_MASK_MASKEN_WF2		((uint16_t)0x0010)	// 0000-0000-0001-0000	Warning alert flag indicator Ch2.
#define PWR_VC_MASK_MASKEN_WF3		((uint16_t)0x0008)	// 0000-0000-0000-1000	Warning alert flag indicator Ch3.
#define PWR_VC_MASK_MASKEN_PVF		((uint16_t)0x0004)	// 0000-0000-0000-0100	Power valid alert flag indicator.
#define PWR_VC_MASK_MASKEN_TCF		((uint16_t)0x0002)	// 0000-0000-0000-0010	Timing Control alert flag indicator.
#define PWR_VC_MASK_MASKEN_CONEN		((uint16_t)0x0001)	// 0000-0000-0000-0001	Conversion Ready flag.

/***************************************************************************/

/***************************************************************************
 *
 * Defining Register Map for Fuel Gauge(Globals.PWR_Fuel_Guage_Data) sensor
 */

#define	PWR_FG_VCELL		((uint8_t)0x02)		// 16 bits Voltage of Cell reading;			OPs -> R
#define	PWR_FG_SOC			((uint8_t)0x04)		// 16 bits State of Charge reading;	Ops -> R
#define	PWR_FG_MODE			((uint8_t)0x06)		// 16 bits Mode Determination Register;	Ops -> Wnot
#define	PWR_FG_VERSION		((uint8_t)0x08)		// 16 bits Version of IC;	Ops -> R
#define	PWR_FG_HIBRT		((uint8_t)0x0A)		// 16 bits Hibernate entering and exiting thresholds register;	Ops -> R/Wnot
#define	PWR_FG_CONFIG		((uint8_t)0x0C)		// 16 bits Configuration register.	Ops -> R/Wnot
#define	PWR_FG_VALRT		((uint8_t)0x14)		// 16 bits Configures the VCELL range outside of which alerts are generated;Ops -> R/Wnot
#define	PWR_FG_CRATE		((uint8_t)0x16)		// 16 bits Approximate charge or discharge rate of the battery; Ops -> R
#define	PWR_FG_VRESET_ID	((uint8_t)0x18)		// 16 bits Configures VCELL threshold below which the IC resets itself; Ops->R/Wnot
#define	PWR_FG_STATUS		((uint8_t)0x1A)		// 16 bits Indicates overvoltage, undervoltage, SOC change, SOC low, and reset alerts; Ops->R
		// table register is remaining ????.	To use them we need unlock it. how to use them contact maxim.
#define	PWR_FG_FE			((uint8_t)0xFE)		// 16 bits Send POR command. Ops-> R/Wnot (?)

/***************************************************************************/

/***************************************************************************
 *
 * Defining Masks for different registers of Fuel Gauge(Globals.PWR_Fuel_Guage_Data) sensor
 */

// Masks for Mode register
#define	PWR_FG_MASK_MODE_QSTART			((uint16_t)0x0400)	// X100-XXXX-XXXX-XXXX Quick start configuration
#define PWR_FG_MASK_MODE_ENSLEEP		((uint16_t)0x0200)	// X010-XXXX-XXXX-XXXX Enable sleep mode
#define PWR_FG_MASK_MODE_HBINDIC		((uint16_t)0x0100)	// X001-XXXX-XXXX-XXXX Hibernate mode indicator. Read only

// Masks for Configuration register
#define PWR_FG_MASK_CONFIG_SLEEP		((uint16_t)0x0080)	// 0000-0000-1000-0000 Force IC to go to sleep mode.
#define PWR_FG_MASK_CONFIG_ALSC			((uint16_t)0x0040)	// 0000-0000-0100-0000 Enable SOC change alert.
#define PWR_FG_MASK_CONFIG_ALRT			((uint16_t)0x0020)	// 0000-0000-0010-0000 Alert bit.

//Masks for Status Register
#define PWR_FG_MASK_STATUS_ENCR			((uint16_t)0x4000)	// X100-0000-XXXX-XXXX Enable Voltage alert
#define PWR_FG_MASK_STATUS_SC			((uint16_t)0x2000)	// X010-0000-XXXX-XXXX Set when SOC changes at least by 1% if CONFIG.ALSC is set
#define PWR_FG_MASK_STATUS_HD			((uint16_t)0x1000)	// X001-0000-XXXX-XXXX Set when SOC crosses value at CONFIG.ATHD (low)
#define PWR_FG_MASK_STATUS_VR			((uint16_t)0x0800)	// X000-1000-XXXX-XXXX Set when device has been reset if ENVR is set
#define PWR_FG_MASK_STATUS_VL			((uint16_t)0x0400)	// X000-0100-XXXX-XXXX Set when VCELL fall below ALRT.VALRTLOW
#define PWR_FG_MASK_STATUS_VH			((uint16_t)0x0200)	// X000-0010-XXXX-XXXX Set when VCELL go above ALRT.VALRTHIGH
#define PWR_FG_MASK_STATUS_RI			((uint16_t)0x0100)	// X000-0001-XXXX-XXXX Set when device powers up.

/***************************************************************************/


/***************************************************************************
 *
 * Defining Register Map for ADC
 */
#define	PWR_ADC_CONV_RES			((uint8_t)0x00)		// 16 bits
#define	PWR_ADC_ALRT				((uint8_t)0x01)		// 16 bits
#define	PWR_ADC_CONFIG				((uint8_t)0x02)		// 16 bits
#define	PWR_ADC_CYC_TIME			((uint8_t)0x03)		// 16 bits
#define	PWR_ADC_DATA_LOW_CH1		((uint8_t)0x04)		// 16 bits
#define	PWR_ADC_DATA_HIGH_CH1		((uint8_t)0x05)		// 16 bits
#define	PWR_ADC_DATA_HYS_CH1		((uint8_t)0x06)		// 16 bits
#define	PWR_ADC_DATA_LOW_CH2		((uint8_t)0x07)		// 16 bits
#define	PWR_ADC_DATA_HIGH_CH2		((uint8_t)0x08)		// 16 bits
#define	PWR_ADC_DATA_HYS_CH2		((uint8_t)0x09)		// 16 bits
#define	PWR_ADC_DATA_LOW_CH3		((uint8_t)0x0A)		// 16 bits
#define	PWR_ADC_DATA_HIGH_CH3		((uint8_t)0x0B)		// 16 bits
#define	PWR_ADC_DATA_HYS_CH3		((uint8_t)0x0C)		// 16 bits
#define	PWR_ADC_DATA_LOW_CH4		((uint8_t)0x0D)		// 16 bits
#define	PWR_ADC_DATA_HIGH_CH4		((uint8_t)0x0E)		// 16 bits
#define	PWR_ADC_DATA_HYS_CH4		((uint8_t)0x0F)		// 16 bits

/***************************************************************************/

/***************************************************************************
 *
 * Defining Masks for different registers of ADC sensor
 */

// Masks for Configuration register
#define PWR_ADC_MASK_CONFIG_SELCH8		((uint16_t)0x0800)	// 0000-1000-0000-0000 Select CH8 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH7		((uint16_t)0x0400)	// 0000-0100-0000-0000 Select CH7 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH6		((uint16_t)0x0200)	// 0000-0010-0000-0000 Select CH6 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH5		((uint16_t)0x0100)	// 0000-0001-0000-0000 Select CH5 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH4		((uint16_t)0x0080)	// 0000-0000-1000-0000 Select CH4 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH3		((uint16_t)0x0040)	// 0000-0000-0100-0000 Select CH3 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH2		((uint16_t)0x0020)	// 0000-0000-0010-0000 Select CH2 for conversion
#define PWR_ADC_MASK_CONFIG_SELCH1		((uint16_t)0x0010)	// 0000-0000-0001-0000 Select CH1 for conversion
#define PWR_ADC_MASK_CONFIG_ENFLTR		((uint16_t)0x0008)	// 0000-0000-0000-1000 Enable filtering of SDA and SCL
#define PWR_ADC_MASK_CONFIG_ALRT		((uint16_t)0x0002)	// 0000-0000-0000-0010 Configure pin as Busy
#define PWR_ADC_MASK_CONFIG_BUSY		((uint16_t)0x0004)	// 0000-0000-0000-0100 Configure pin as Alert
#define PWR_ADC_MASK_CONFIG_CLRALRT		((uint16_t)0x0004)	// 0000-0000-0000-0110 Reset ALERT output pin and all other places


// Masks for Alert Status register
#define PWR_ADC_MASK_ALRT_STAT_CH1_L	((uint8_t)0x01)	// 0000-0001 Violation of Data low limit on Ch1
#define PWR_ADC_MASK_ALRT_STAT_CH1_H	((uint8_t)0x02)	// 0000-0010 Violation of Data High limit on Ch1
#define PWR_ADC_MASK_ALRT_STAT_CH2_L	((uint8_t)0x03)	// 0000-0100 Violation of Data low limit on Ch2
#define PWR_ADC_MASK_ALRT_STAT_CH2_H	((uint8_t)0x04)	// 0000-1000 Violation of Data High limit on Ch2
#define PWR_ADC_MASK_ALRT_STAT_CH3_L	((uint8_t)0x05)	// 0001-0000 Violation of Data low limit on Ch3
#define PWR_ADC_MASK_ALRT_STAT_CH3_H	((uint8_t)0x06)	// 0010-0000 Violation of Data High limit on Ch3
#define PWR_ADC_MASK_ALRT_STAT_CH4_L	((uint8_t)0x07)	// 0100-0000 Violation of Data low limit on Ch4
#define PWR_ADC_MASK_ALRT_STAT_CH4_H	((uint8_t)0x08)	// 1000-0000 Violation of Data High limit on Ch4

// Masks for Mode 2 of ADC should be masked to pointer register.
#define PWR_ADC_MASK_MODE2_CH1		((uint8_t)0x80)	// 1000-0000 Select CH1 in command mode
#define PWR_ADC_MASK_MODE2_CH2		((uint8_t)0x90)	// 1001-0000 Select CH2 in command mode
#define PWR_ADC_MASK_MODE2_CH3		((uint8_t)0xA0)	// 1010-0000 Select CH3 in command mode
#define PWR_ADC_MASK_MODE2_CH4		((uint8_t)0xB0)	// 1011-0000 Select CH4 in command mode
#define PWR_ADC_MASK_MODE2_CH5		((uint8_t)0xC0)	// 1100-0000 Select CH5 in command mode
#define PWR_ADC_MASK_MODE2_CH6		((uint8_t)0xD0)	// 1101-0000 Select CH6 in command mode
#define PWR_ADC_MASK_MODE2_CH7		((uint8_t)0xE0)	// 1110-0000 Select CH7 in command mode
#define PWR_ADC_MASK_MODE2_CH8		((uint8_t)0xF0)	// 1111-0000 Select CH8 in command mode
#define PWR_ADC_MASK_MODE2_SEQCH	((uint8_t)0x70)	// Sequence of channels selected in configuration register
/***************************************************************************/

#define PWR_SWITCH_ON		((uint8_t) 0x01)
#define PWR_SWITCH_OFF		((uint8_t) 0x00)

#define PWR_ADC_NORM_TEMP 	(float)(298.18)	// 275.18 + 25

#define PWR_VC_SH_STEP_SIZE 	(int32_t)40	// Microvolts
#define PWR_VC_BUS_STEP_SIZE 	(int32_t)8	// Millivolts

/*
I2C C0 and C1 Data Valid flags
To Be stored in CDH_Primary_Info Upper two bits
*/
#define EPS_C0_DATA_VALID_FLAG      0x10
#define EPS_C1_DATA_VALID_FLAG      0x20
#define EPS_NC_DATA_VALID_FLAG      0x40

/*
Error Indices for the three I2C Lines
*/
#define C0_ERROR_INDEX				0
#define C1_ERROR_INDEX				1
#define NC_ERROR_INDEX				2

/*
EPS State Machine defs
*/
#define PWR_STATE_IDLE						0x00
#define PWR_STATE_BEACON_C0				0x01
#define PWR_STATE_BEACON_C1_1			0x02
#define PWR_STATE_BEACON_C1_2			0x03
#define PWR_STATE_BEACON_C1_3			0x4
#define PWR_STATE_BEACON_NC1			0x5
#define PWR_STATE_BEACON_NC2			0x6
#define PWR_STATE_BEACON_NC3			0x7
#define PWR_STATE_DONE						0x80

#define PWR_STATE_BEACON_UPDATES	34

GLOBAL Module_Sync_t EPS_Module_Sync;


void PWR_Init_Comm();


#endif
