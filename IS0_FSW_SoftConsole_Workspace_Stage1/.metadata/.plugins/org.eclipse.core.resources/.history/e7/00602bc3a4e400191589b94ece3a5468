/*
 * main_sch.h
 *
 *  Created on: Jul 9, 2018
 *      Author: Ankit
 */
/*
 * // Default Flags order:
 * 1st bit - UHF
 * 2th bit - ADCS
 * 3th bit - SBAND
 * 4th bit - CIP
 * 5th bit - EPS
 * 6th bit - CDH
 * 7th bit - DAXSS
 */
#ifndef _MAIN_SEQ_H
#define _MAIN_SEQ_H

#define ENABLE_UART0_COMMAND


#include "CortexM3/GNU/cpu_types.h"
#include "mss_spi/mss_spi.h"

#undef  GLOBAL
#ifdef _MAIN_SEQ_C
#define GLOBAL
#else
#define GLOBAL extern
#endif

/*************************************************************************/
/* Some general definitions*/
#define SC_REBOOT_SIGNAL_DELAY	240
#define PI 											(22/7)
#define SPI_ESCAPE_LIMIT				0xff00
#define UHF_MAX_DATA_SIZE       0x100
#define CCSDS_MAX_DATA_SIZE 		243

#define SBAND_SYNC_WORD 				(uint16_t) 0x4869
#define SIZEOF_SYNC_WORD				sizeof(SBAND_SYNC_WORD)


/*************************************************************************/

/* Defining the APIDs of different packet */
#define  BEACON_PACKET_APID                     0x10
#define  SCIC_PACKET_APID                       0x20
#define  HK_PACKET_APID                         0x30
#define  ADCS_PACKET_APID_0                     0x40
#define  ADCS_PACKET_APID_1                     0x41
#define  ADCS_PACKET_APID_2                     0x42
#define  ADCS_PACKET_APID_3                     0x43
#define  ADCS_PACKET_APID_4                     0x44
#define  ADCS_PACKET_APID_5                     0x45
#define  ADCS_IMG_PACKET_APID                   0x50
#define  PARAMETER_PACKET_APID_1                0x60
#define  PARAMETER_PACKET_APID_2                0x61
#define  GLOBAL_PACKET_APID_1					0x70
#define  GLOBAL_PACKET_APID_2					0x71
#define  GLOBAL_PACKET_APID_3					0x72
#define  LOG_PACKET_APID                        0x80
#define  ECHO_BACK_PACKET_APID                  0x90
#define  SUBSYSTEM_RESPSONSE_PACKET_APID        0xA0
/*************************************************************************/

/* Defining the modes of operation of the spacecraft */
#define SC_PHOENIX_MODE     0x00
#define SC_SAFE_MODE        0x01
#define SC_CHARGING_MODE    0x02
#define SC_SCIC_MODE        0x03
#define SC_SCID_MODE        0x04
/*************************************************************************/

/* Defining the flags for avoiding a mode: Globals.Sat_Avoid_Mode */
#define SC_AVOID_SCID       0x03
#define SC_AVOID_SCIC       0x0C
#define SC_AVOID_CHARGING   0x30
#define SC_AVOID_SAFE       0xC0
/*************************************************************************/

/* Globals.Deps_Wait_Tumb_Flag */
#define SP1_DEPLOYMENT_FLAG	0x01
#define SP2_DEPLOYMENT_FLAG	0x02
#define ANT_DEPLOYMENT_FLAG	0x04
#define PSLV_WAIT_FLAG		0x08
#define DE_TUMBLED_FLAG		0x10
/*************************************************************************/

/* Globals.Timers_Started_Flag */
#define PSLV_WAIT_TIMER_STARTED_FLAG			0x001
#define DEPLOYMENT_DURATION_TIMER_STARTED_FLAG	0x002
#define DEPLOYMENT_WAIT_TIMER_STARTED_FLAG		0x004
#define HK_TIMER_STARTED_FLAG					0x008
#define BEAC_TIMER_STARTED_FLAG					0x010
#define BEAC_TRANS_TIMER_STARTED_FLAG			0x020
#define ADCS_PACK_TIMER_STARTED_FLAG			0x040
#define LAST_COMMAND_TIMER_STARTED_FLAG			0x080
#define WATCHDOG_SIGNAL_TIMER_FLAG               0x100
#define ADCS_BOOT_WAIT_TIMER_STARTED            0x200
/*************************************************************************/

/* Indication Flags: Indication_Flags */
#define SAVE_PARAMETER_MAP_FLAG     	0x0001
#define SD_CARD0_WORKING            	0x0002
#define SD_CARD1_WORKING            	0x0004
#define AUTO_SBAND_BEACON_TRANS     	0x0008
#define AUTO_SBAND_DATA_TRANS      	 	0x0010
#define SC_REBOOT                   	0x0020
#define IS_ECLIPSE                  	0x0040
#define ADCS_BOOT_WAIT_COMPLETED    	0x0080
#define SBAND_TRANSMIT_ENABLE	    		0x0100
#define UHF_TRANSMIT_ENABLE    				0x0200
#define TRANSMIT_DATA_READY         	0x0400
#define UPDATE_RTC_GPS              	0x0800
#define REQ_BEACON_TRANSMIT         	0x1000
#define REQ_PARAM_TRANSMIT          	0x2000
#define REQ_SD_DATA_TRANSMIT        	0x4000
#define REQ_ADCS_IMG_TRANSMIT       	0x8000
#define REQ_SUBSYS_RESPONSE_TRANSMIT  0x10000
#define REQ_GLOBAL_TRANSMIT					  0x20000
#define TRANSMIT_BAND									0x40000


/*************************************************************************/

/* Command Persistant Flags: Globals.CMD_Persistant_Flags*/
#define AUTO_SBAND_TRANS           	 	0x01
#define CMD_ECHO_ON		            		0x02
#define FORCE_MODE_FLAG            	  0x04
/*************************************************************************/

/* Data Valid Flags: Beac_pack.CDH_Sub_System_Data_Valid_Flags */
#define UHF_DATA_VALID_FLAG		0x01
#define ADCS_DATA_VALID_FLAG	0x02
#define SBAND_DATA_VALID_FLAG	0x04
#define CIP_DATA_VALID_FLAG		0x08
#define EPS_C0_DATA_VALID_FLAG      0x10
#define EPS_C1_DATA_VALID_FLAG      0x20
#define EPS_NC_DATA_VALID_FLAG		0x40
#define DAXSS_DATA_VALID_FLAG   0x80
#define EPS_DATA_VALID_FLAG		0x10
/*************************************************************************/

/* UHF Malfunction flags: Globals.UHF_Malfunction_Flags */
#define UHF_SOFT_RESTARTED_FLAG 			0x01
/*************************************************************************/

/* ADCS Malfunction flags: ADCS_Malfunction_Flags */
#define ADCS_SOFT_RESTARTED_FLAG          0x01
#define ADCS_RESTARTED_FLAG               0x02
/*************************************************************************/

/* ADCS Malfunction flags: SBAND_Malfunction_Flags */
#define SBAND_FPGA_RESET_FLAG               0x01
#define SBAND_EN_RESET_FLAG                 0x02
#define SBAND_DSW_RESET_FLAG                0x04
/*************************************************************************/

/* DAXSS Malfunction flags: DAXSS_Malfunction_Flags */
#define DAXSS_RESTARTED_FLAG               0x01
/*************************************************************************/

/* Globals.Transmit_Helper State definitions */
#define TRANS_HELPER_IDLE			0x00

#define TRANS_HELPER_PARAM_READ	    0x01
#define TRANS_HELPER_PARAM_TRANS1	0x02
#define TRANS_HELPER_PARAM_TRANS2	0x03

#define TRANS_HELPER_GLOBAL_TRANS1	0x01
#define TRANS_HELPER_GLOBAL_TRANS2	0x02
#define TRANS_HELPER_GLOBAL_TRANS3	0x03
/*************************************************************************/

/* Packet Sizes (including CCSDS Headers) */
#define CCSDS_TLM_WRAPPER_SIZE			13
#define SCID_PACKET_SIZE 				254
#define BEACON_PACKET_SIZE				254
#define PARAMETER_TABLE1_PACKET_SIZE 	256
#define PARAMETER_TABLE2_PACKET_SIZE	94
#define HK_PACKET_SIZE					0
#define SCIC_PACKET_SIZE				0
#define ADCS_TM_PACKET_0_SIZE			241
#define ADCS_TM_PACKET_1_SIZE			240
#define ADCS_TM_PACKET_2_SIZE			241
#define ADCS_TM_PACKET_3_SIZE			240
#define ADCS_TM_PACKET_4_SIZE			238
#define ADCS_TM_PACKET_5_SIZE			245
#define ADCS_NUM_TM_PACKETS				6
#define LOG_PACKET_SIZE					72
/*************************************************************************/


/***************************** Global Variables ***************************************************/

//GLOBAL uint8_t Sat_Curr_Mode;   // Holds the current mode of the spacecraft
//GLOBAL uint8_t Sat_Avoid_Mode;  // Holds the data regarding the avoiding modes.

//GLOBAL uint32_t Timers_Started_Flag;    // Holds the data of which timer has started.


//GLOBAL uint32_t Indication_Flags;   // Used for indicating various actions to different modules

 /* Sequence counter for packets */
//GLOBAL uint16_t Beacon_Packet_Seq_Counter;  // The CCSDS sequence counter for beacon packet
//GLOBAL uint16_t Science_Packet_Seq_Counter; // The CCSDS sequence counter for Science Packet
//GLOBAL uint16_t ADCS_Packet_Seq_Counter;    // The CCSDS sequence counter for ADCS Packet
//GLOBAL uint16_t ADCS_IMG_Packet_Seq_Counter;    // The CCSDS sequence counter for ADCS image Packet
//GLOBAL uint16_t Log_Packet_Seq_Counter; // The CCSDS sequence counter for Log Packet
//GLOBAL uint16_t HK_Packet_Seq_Counter;  // The CCSDS sequence counter for HK Packet
//GLOBAL uint16_t Parameter_Table_Packet_Seq_Counter;
//GLOBAL uint16_t Subsys_Response_Packet_Seq_Counter; // The CCSDS sequence counter for Subsystem Response Packet

/*-------------------------- All the ENVM parameters -------------------------- */

/* LSB  0: SP1, 1: SP2, 2: ANT, 3: PSLV_WAIT_FLAG, 4: Tumble Flag,  5: xx, 6: xx, 7: Sys_Reset MSB */
//GLOBAL uint8_t  Deps_Wait_Tumb_Flag;    // Holds flags for PSLV wait; detumble; and solar panels and antenna deployment

/* Variables for timers and time*/
//GLOBAL Timer32_t PSLV_Wait_Timer;   // Timer for 40 minutes PSLV delay
//GLOBAL Timer32_t Deployment_Wait_Timer; // Timer for 30 minutes delay between deployment attempts.
//GLOBAL Timer16_t Deployment_Duration_Timer; // Timer for 30 seconds of deployment.
//GLOBAL Timer32_t HK_Timer;  // Timer for 30 seconds delay to store HK packet
//GLOBAL Timer32_t Beac_Timer;    // Timer for 5 seconds delay to store beacon packet
//GLOBAL Timer32_t Beac_Trans_Timer;  // Timer for 10 seconds delay for beacon transmission.
//GLOBAL Timer32_t ADCS_Pack_Timer;   // Timer for 30 seconds delay to store ADCS packet
//GLOBAL Timer32_t Last_Command_Timer;    // Timer for 2 days delay before restarting the spacecraft if no command is received from GS.
//GLOBAL Timer16_t Watchdog_Signal_Timer; // Timer for 700 milliseconds delay between two consecutive signals to the external watchdog
//GLOBAL Timer32_t RTC_Sync_Timer;    // Timer for 60 seconds for updating the RTC value with GPS time

/* Malfunction flags */
//GLOBAL uint8_t UHF_Malfunction_Flags;   // Holds the information regarding the UHF malfunction
//GLOBAL uint8_t ADCS_Malfunction_Flags;  // Holds the information regarding the ADCS malfunction
//GLOBAL uint8_t SBAND_Malfunction_Flags; // Holds the information regarding the SBand malfunction
//GLOBAL uint8_t DAXSS_Malfunction_Flags; // Holds the information regarding the DAXSS malfunction

/* Limits */
//GLOBAL uint8_t Non_Response_Count_Limit;    // The limit on no. of times non-response should be received before peforming FDRI
//GLOBAL uint8_t Subsystem_Restart_Limit; // The number of times the spacecraft can be power cycled for a subsystem.
//GLOBAL float SBAND_Auto_Lat_Beac1_i_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Lat_Beac1_f_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Beac1_i_Limit; // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Beac1_f_Limit; // Limit for auto sband transmission


//GLOBAL float SBAND_Auto_Lat_Data1_i_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Lat_Data1_f_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Data1_i_Limit; // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Data1_f_Limit; // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Lat_Beac2_i_Limit;  // Limit for auto sband transmission
//
//
//GLOBAL float SBAND_Auto_Lat_Beac2_f_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Beac2_i_Limit; // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Beac2_f_Limit; // Limit for auto sband transmission


//GLOBAL float SBAND_Auto_Lat_Data2_i_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Lat_Data2_f_Limit;  // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Data2_i_Limit; // Limit for auto sband transmission
//GLOBAL float SBAND_Auto_Long_Data2_f_Limit; // Limit for auto sband transmission

/* Thresholds */
//GLOBAL uint16_t Phoe_Safe_Threshold;    //Phoenix to Safe to threshold value
//GLOBAL uint16_t Safe_Phoe_Threshold;    //Safe to phoenix to threshold value
//GLOBAL uint16_t Safe_Char_Threshold;    //Safe to Charging to threshold value
//GLOBAL uint16_t Char_Safe_Threshold;    //Charging to Safe to threshold value
//GLOBAL uint16_t Char_SciD_Threshold;    //Charging to SciD to threshold value
//GLOBAL uint16_t SciD_Char_Threshold;    //SciD to Charging to threshold value
//GLOBAL uint16_t Char_SciC_Threshold;    //Charging to SciC to threshold value
//GLOBAL uint16_t SciC_Char_Threshold;    //SciC to Charging to threshold value
//GLOBAL uint16_t SP_Deployment_Stop_Volt_Threshold;  // The voltage level of solar panels above which the deployment attempts of the solar panel will stop
//GLOBAL float De_tumble_Threshold;   // The net body rate below which the de-tumble flag will be set
//GLOBAL float ADCS_Eclipse_Threshold;    // The angle of sun vector to the nadir vector; in body frame below which the eclipse flag will be set

/* Counters */
//GLOBAL uint8_t UHF_SC_Restart_Counter;  // Counts number of time the spacecraft is restart due to UHF malfunction
//GLOBAL uint8_t UHF_VC_SC_Restart_Counter;   // Counts number of time the spacecraft is restart due to VC sensor for UHF
//GLOBAL uint8_t ADCS_SC_Restart_Counter; // Counts number of time the spacecraft is restart due to ADCS malfunction
//GLOBAL uint8_t ADCS_VC_SC_Restart_Counter;  // Counts number of time the spacecraft is restart due to VC sensor for ADCS
//GLOBAL uint8_t SBAND_SC_Restart_Counter;    // Counts number of time the spacecraft is restart due to SBand malfunction
//GLOBAL uint8_t SBAND_VC_SC_Restart_Counter; // Counts number of time the spacecraft is restart due to VC sensor for SBand
//GLOBAL uint8_t DAXSS_SC_Restart_Counter;    // Counts number of time the spacecraft is restart due to DAXSS malfunction
//GLOBAL uint8_t DAXSS_VC_SC_Restart_Counter; // Counts number of time the spacecraft is restart due to VC sensor for DAXSS

/* SPI Flash Parameters */
//GLOBAL uint8_t Flash_SPI_Tries_Limit;   // No. of times the write operation on flash memory will take place in case of failure

/* Command Persistent flags*/
//GLOBAL uint8_t CMD_Persistant_Flags;    // Holds information of commands from GS which are to be persistent

 /* other counters */
//GLOBAL uint32_t Boot_Up_Counter;    // Number of times the flight software restarted.

/* Sectors pointers*/
//GLOBAL uint32_t Beacon_Sector_Start;    // Indicate the start sector of beacon packet.
//GLOBAL uint32_t Beacon_Sector_End;  // Indicate the end sector of beacon packet.
//GLOBAL uint32_t SciC_Sector_Start;  // Indicate the start sector of SciC packet.
//GLOBAL uint32_t SciC_Sector_End;    // Indicate the end sector of SciC packet.
//GLOBAL uint32_t SciD_Sector_Start;  // Indicate the start sector of SciD packet.
//GLOBAL uint32_t SciD_Sector_End;    // Indicate the end sector of SciD packet.
//GLOBAL uint32_t ADCS_Sector_Start;  // Indicate the start sector of ADCS packet.
//GLOBAL uint32_t ADCS_Sector_End;    // Indicate the end sector of ADCS packet.
//GLOBAL uint32_t ADCS_Image_Sector_Start;       // Indicate the start sector of Star tracker image.
//GLOBAL uint32_t ADCS_Image_Sector_End;     // Indicate the end sector of Star tracker image.
//GLOBAL uint32_t Log_Sector_Start;   // Indicate the start sector of Log packet.
//GLOBAL uint32_t Log_Sector_End; // Indicate the end sector of Log packet.
//GLOBAL uint32_t HK_Sector_Start;    // Indicate the start sector of HK packet.
//GLOBAL uint32_t HK_Sector_End;  // Indicate the end sector of HK packet.

/* Real time read and write sector indicator */
//GLOBAL uint32_t Beacon_Write_Start; // Indicate the sector address where next write operation of beacon packet will take place
//GLOBAL uint32_t Beacon_Read_Start;  // Indicate the sector address from where next transmission of beacon packet will take place
//GLOBAL uint32_t SciC_Write_Start;   // Indicate the sector address where next write operation of SciC packet will take place
//GLOBAL uint32_t SciC_Read_Start;    // Indicate the sector address from where next transmission of SciC packet will take place
//GLOBAL uint32_t SciD_Write_Start;   // Indicate the sector address where next write operation of SciD packet will take place
//GLOBAL uint32_t SciD_Read_Start;    // Indicate the sector address from where next transmission of SciD packet will take place
//GLOBAL uint32_t ADCS_Write_Start;   // Indicate the sector address where next write operation of ADCS packet will take place
//GLOBAL uint32_t ADCS_Read_Start;    // Indicate the sector address from where next transmission of ADCS packet will take place
//GLOBAL uint32_t ADCS_Image_Write_Start; // Indicate the sector address where next write operation of star tracker will take place
//GLOBAL uint32_t ADCS_Image_Read_Start;  // Indicate the sector address from where next transmission of star tracker will take place
//GLOBAL uint32_t Log_Write_Start;    // Indicate the sector address where next write operation of Log packet will take place
//GLOBAL uint32_t Log_Read_Start; // Indicate the sector address from where next transmission of Log packet will take place
//GLOBAL uint32_t HK_Write_Start; // Indicate the sector address where next write operation of HK packet will take place
//GLOBAL uint32_t HK_Read_Start;  // Indicate the sector address from where next transmission of HK packet will take place

//GLOBAL uint8_t Current_SD;  // Indicate which SD card to use

GLOBAL uint64_t statusG;

GLOBAL uint8_t GS_Pipeline_CMD[238];    // Store the command to be forwarded to a subsystem

GLOBAL uint8_t Transmit_MSG[2][512];   // Stores the data to be transmitted


//Transmit_Buff_Manage Current_Transmit;
//Transmit_Buff_Manage Next_Transmit;

//GLOBAL Module_Sync_Small_t Transmit_Helper;
//GLOBAL uint8_t Transmit_Completed_SBand;
//GLOBAL uint16_t Next_Transmit_Length;
//GLOBAL uint16_t Next_Total_Transmit_Length;
//GLOBAL uint16_t Current_Transmit_Length;
//GLOBAL uint16_t Total_Transmit_Length;
//GLOBAL uint8_t Current_Transmit_Buffer_Index;
//GLOBAL uint8_t Next_Transmit_Buffer_Index;
//GLOBAL uint16_t Curr_Transmit_Offset;
//GLOBAL uint16_t Next_Transmit_Offset;


/********************************* Global Variable Ends ***********************************************/

void main_seq();

void Init();

/* Task function's definitions */
void Configure_EPS_Slaves();
void Read_EPS_Data();
//void Handle_I2C_Slave_Error(uint32_t);

void Last_Command_Timer_Handler();
void PSLV_Wait_Timer_Handler();
void Deployment_Timer_Handler();
void HK_Timer_Handler();
void Store_HK_Data();
void Beacon_Timer_Handler();
void Store_Beacon_Data();

void Beacon_Transmit_Timer_Handler();
uint8_t ADCS_Timer_Handler();
void Watchdog_Timer_Handler();

void SC_Restart();

void Make_Log_packet(uint8_t *  msg, uint8_t len);

void Make_Subsystem_Reponse_Packet();

void RTC_Sync_Timer_Hanlder();

void Decide_Mode();

void Handle_Power_Supply();

void Manage_Data_Transmission();

void Handle_Transmit();

void Utils_SPI_Custom_Setup(mss_spi_instance_t * this_spi, uint16_t frame_count);
uint16_t Utils_SPI_Transmit_Block(mss_spi_instance_t * this_spi, uint8_t * cmd_buffer, uint16_t cmd_byte_size);
uint16_t Utils_SPI_Receive_Block(mss_spi_instance_t * this_spi, uint8_t * rec_buffer, uint16_t rec_byte_size);

#pragma pack(1)


struct AX_25_Header{
    uint8_t DES_A[7];
    uint8_t SOU_A[7];

    uint8_t Control_Field;
    uint8_t PID;

} ax_25_pack;

struct CCSDS_Header{
        uint8_t Version_ID;
        uint8_t APID;
        uint16_t Seq_no;
        uint16_t PL;
        uint8_t TS2;    /* 1 lSB byte */
        uint32_t TS1;   /* 4 byte of MSB */
};

struct Beacon_packet{

    struct CCSDS_Header beac_head;

    uint32_t CDH_CMD_Accept_Count;
    uint32_t CDH_CMD_Reject_Count;
    uint8_t CDH_Last_CMD_APID;
    uint8_t CDH_Last_CMD_Option1;
    uint8_t CDH_Last_CMD_Option2;
    uint8_t CDH_CMD_Reject_Status;
    uint8_t CDH_Subsystem_ON_Stat;
    uint16_t CDH_Temp;
    uint8_t CDH_Primary_Info;
    uint32_t CDH_Indication_Flags;
    uint32_t CDH_HK_Read_start;
    uint32_t CDH_SciC_Read_start;
    uint32_t CDH_SciD_Read_start;
    uint32_t CDH_ADCS_Read_start;
    uint32_t CDH_Beacon_Read_start;
    uint32_t CDH_Log_Read_start;
    uint32_t CDH_HK_Write_start;
    uint32_t CDH_SciC_Write_start;
    uint32_t CDH_SciD_Write_start;
    uint32_t CDH_ADCS_Write_start;
    uint32_t CDH_Beacon_Write_start;
    uint32_t CDH_Log_Write_start;

    uint32_t CDH_Last_CMD_Timer;
    uint8_t CDH_Sub_System_Data_Valid_Flags;

    uint16_t EPS_Bat_Volt;
    uint16_t EPS_Bat_Curr;
    uint16_t EPS_Bus_Volt;
    uint16_t EPS_Bus_Curr;
    uint16_t EPS_Bat_SOC;
    uint16_t EPS_Bat_Temp1;
    uint16_t EPS_Bat_Temp2;
    uint16_t EPS_SP1_Volt;
    uint16_t EPS_SP2_Volt;
    uint16_t EPS_SP3_Volt;
    uint16_t EPS_SP1_Curr;
    uint16_t EPS_SP2_Curr;
    uint16_t EPS_SP3_Curr;
    uint16_t EPS_Interface_Temp;
    uint16_t EPS_EPS_Temp;
    uint16_t EPS_CIP_Volt;
    uint16_t EPS_CIP_Curr;
    uint16_t EPS_ADCS_Volt;
    uint16_t EPS_ADCS_Curr;
    uint16_t EPS_SBAND_Volt;
    uint16_t EPS_SBAND_Curr;
    uint16_t EPS_UHF_Volt;
    uint16_t EPS_UHF_Curr;
    uint16_t EPS_CDH_Volt;
    uint16_t EPS_CDH_Curr;
    uint16_t EPS_GPS_33_Volt;
    uint16_t EPS_GPS_33_Curr;
    uint16_t EPS_GPS_12_Volt;
    uint16_t EPS_GPS_12_Curr;
    uint16_t EPS_Bat_Heater_Curr;
    uint16_t EPS_DAXSS_Volt;
    uint16_t EPS_DAXSS_Curr;

    uint32_t CIP_ComStat;
    uint16_t CIP_Temp1;
    uint16_t CIP_Temp2;
    uint16_t CIP_Temp3;

    uint16_t UHF_Temp;
    uint8_t UHF_Health;
    uint8_t UHF_Config;

    uint8_t SBand_Stats;
    uint16_t SBand_PA_Curr;
    uint16_t SBand_PA_Volt;
    uint16_t SBand_RF_OP_Power;
    uint16_t SBand_PA_temp;
    uint16_t SBand_Top_Board_Temp;
    uint16_t SBand_Bot_Board_Temp;

    uint8_t ADCS_CMD_Stat;
    uint8_t ADCS_CMD_Reject_Count;
    uint8_t ADCS_CMD_Accept_Count;
    uint32_t ADCS_Time;
    uint8_t ADCS_Info;
    int8_t ADCS_Start_Track_Temp;
    int16_t ADCS_Wheel_Temp1;
    int16_t ADCS_Wheel_Temp2;
    int16_t ADCS_Wheel_Temp3;
    int16_t ADCS_Digi_Bus_Volt;
    int16_t ADCS_Sun_Vec1;
    int16_t ADCS_Sun_Vec2;
    int16_t ADCS_Sun_Vec3;
    int16_t ADCS_Wheel_Est_Speed1;
    int16_t ADCS_Wheel_Est_Speed2;
    int16_t ADCS_Wheel_Est_Speed3;
    int32_t ADCS_Body_Frame_Rate1;
    int32_t ADCS_Body_Frame_Rate2;
    int32_t ADCS_Body_Frame_Rate3;
    // int16_t ADCS_Mag_Vector_Body1;
    // int16_t ADCS_Mag_Vector_Body2;
    // int16_t ADCS_Mag_Vector_Body3;
    int32_t ADCS_Body_quat1;
    int32_t ADCS_Body_quat2;
    int32_t ADCS_Body_quat3;
    int32_t ADCS_Body_quat4;

    uint8_t DAXSS_CDH_info;
    uint8_t DAXSS_Cmd_Last_OPcode;
    uint16_t DAXSS_Last_Status;
    uint16_t DAXSS_CMD_accept_count;
    uint16_t DAXSS_CMD_rej_count;
    uint16_t DAXSS_CDH_Enables;
    uint16_t DAXSS_CDH_Temp;
    uint16_t DAXSS_SPS_sum_rate;
    uint16_t DAXSS_SPS_x;
    uint16_t DAXSS_SPS_y;
    uint16_t DAXSS_X123_Slow_Count_Rate;

    uint16_t Fletcher_code;

} Beacon_pack;

struct housekeep_packet {

}HK_pack;


struct Log_packet{

    struct CCSDS_Header log_head;

    uint16_t Bat_SOC;
    uint8_t CDH_Primary_Info;
    uint8_t Sub_System_Data_Valid_Flags;
    uint8_t ADCS_Info;
    uint32_t ADCS_Time;

    uint8_t Message[50];

    uint16_t Fletcher_code;

} Log_pack;

struct ADCS_packet_s02{

    struct CCSDS_Header adcs_head;

    uint8_t data[ADCS_TM_PACKET_0_SIZE - CCSDS_TLM_WRAPPER_SIZE];

    uint16_t Fletcher_code;

};
struct ADCS_packet_s02 adcs_pack0;
struct ADCS_packet_s02 adcs_pack2;

struct ADCS_packet_s13{

    struct CCSDS_Header adcs_head;

    uint8_t data[ADCS_TM_PACKET_1_SIZE - CCSDS_TLM_WRAPPER_SIZE];

    uint16_t Fletcher_code;

};
struct ADCS_packet_s13 adcs_pack1;
struct ADCS_packet_s13 adcs_pack3;

struct ADCS_packet_s4{

    struct CCSDS_Header adcs_head;

    uint8_t data[ADCS_TM_PACKET_4_SIZE - CCSDS_TLM_WRAPPER_SIZE];

    uint16_t Fletcher_code;

} adcs_pack4;

struct ADCS_packet_s5{

    struct CCSDS_Header adcs_head;

    uint8_t data[ADCS_TM_PACKET_5_SIZE - CCSDS_TLM_WRAPPER_SIZE];

    uint16_t Fletcher_code;

} adcs_pack5;

struct Subsys_Response_packet{

    struct CCSDS_Header subsys_resp_head;

    uint16_t Bat_SOC;
    uint8_t CDH_Primary_Info;
    uint8_t Response_valid;

    uint8_t rx_data[230];

    uint16_t Fletcher_code;

} Subsys_Response_pack;

typedef struct Parameter_Table
{
    uint8_t Param_Deps_Wait_Tumb_Flag;
    uint8_t Param_Current_SD;

    /* Timer data */
    uint32_t Param_PSLV_Wait_Timer_Time;
    uint32_t Param_Deployment_Wait_Timer_Time;
    uint32_t Param_Deployment_Duration_Timer_Time;
    uint32_t Param_HK_Timer_Time;
    uint32_t Param_Beac_Timer_Time;
    uint32_t Param_Beac_Trans_Timer_Time;
    uint32_t Param_ADCS_Pack_Timer_Time;
    uint32_t Param_Last_Command_Timer_Time;
    uint16_t Param_Watchdog_Signal_Timer_Time;
    uint16_t Param_ADCS_Boot_Wait_Timer_Time;
    uint16_t Param_ADCS_CMD_Timer_Time;
    uint16_t Param_ADCS_Response_Limit_Timer_Time;
    uint16_t Param_DAXSS_Sci_Packet_Timer_Time;
    uint16_t Param_DAXSS_CMD_Timer_Time;
    uint16_t Param_DAXSS_Response_Limit_Timer_Time;
    uint16_t Param_UHF_CMD_Timer_Time;
    uint16_t Param_UHF_Response_Limit_Timer_Time;
    uint16_t Param_SBand_CMD_Timer_Time;
    uint32_t Param_RTC_Sync_Timer_Time;

    /* Counters */
    uint8_t Param_UHF_SC_Restart_Counter;
    uint8_t Param_UHF_VC_SC_Restart_Counter;
    uint8_t Param_ADCS_SC_Restart_Counter;
    uint8_t Param_ADCS_VC_SC_Restart_Counter;
    uint8_t Param_SBAND_SC_Restart_Counter;
    uint8_t Param_SBAND_VC_SC_Restart_Counter;
    uint8_t Param_DAXSS_SC_Restart_Counter;
    uint8_t Param_DAXSS_VC_SC_Restart_Counter;
    uint32_t Param_Boot_Up_Counter;
    uint32_t Param_CMD_Accept_Count;
    uint32_t Param_CMD_Reject_Count;

    /* Flags */
    uint8_t Param_UHF_Malfunction_Flags;
    uint8_t Param_ADCS_Malfunction_Flags;
    uint8_t Param_SBAND_Malfunction_Flags;
    uint8_t Param_DAXSS_Malfunction_Flags;
    uint8_t Param_CMD_Persistant_Flags;
    uint8_t Param_DAXSS_Enable_Wait;

    /* Limits */
    uint8_t Param_Flash_SPI_Tries_Limit;
    uint16_t Param_Flash_SPI_Wait_Limit;
    uint8_t Param_Subsystem_Restart_Limit;
    float Param_SBAND_Auto_Lat_Beac1_i_Limit;
    float Param_SBAND_Auto_Lat_Beac1_f_Limit;
    float Param_SBAND_Auto_Long_Beac1_i_Limit;
    float Param_SBAND_Auto_Long_Beac1_f_Limit;
    float Param_SBAND_Auto_Lat_Data1_i_Limit;
    float Param_SBAND_Auto_Lat_Data1_f_Limit;
    float Param_SBAND_Auto_Long_Data1_i_Limit;
    float Param_SBAND_Auto_Long_Data1_f_Limit;
    float Param_SBAND_Auto_Lat_Beac2_i_Limit;
    float Param_SBAND_Auto_Lat_Beac2_f_Limit;
    float Param_SBAND_Auto_Long_Beac2_i_Limit;
    float Param_SBAND_Auto_Long_Beac2_f_Limit;
    float Param_SBAND_Auto_Lat_Data2_i_Limit;
    float Param_SBAND_Auto_Lat_Data2_f_Limit;
    float Param_SBAND_Auto_Long_Data2_i_Limit;
    float Param_SBAND_Auto_Long_Data2_f_Limit;
    uint8_t Param_Non_Response_Count_Limit;

    /* Thresholds */
    uint16_t Param_Phoe_Safe_Threshold;
    uint16_t Param_Safe_Phoe_Threshold;
    uint16_t Param_Safe_Char_Threshold;
    uint16_t Param_Char_Safe_Threshold;
    uint16_t Param_Char_SciC_Threshold;
    uint16_t Param_SciC_Char_Threshold;
    uint16_t Param_Char_SciD_Threshold;
    uint16_t Param_SciD_Char_Threshold;
    uint16_t Param_SP_Deployment_Stop_Volt_Threshold;
    float Param_De_tumble_Threshold;
    float Param_ADCS_Eclipse_Threshold;

    /* SD card data */
    uint32_t Param_Beacon_Sector_Start;
    uint32_t Param_Beacon_Sector_End;
    uint32_t Param_SciD_Sector_Start;
    uint32_t Param_SciD_Sector_End;
    uint32_t Param_SciC_Sector_Start;
    uint32_t Param_SciC_Sector_End;
    uint32_t Param_ADCS_Sector_Start;
    uint32_t Param_ADCS_Sector_End;
    uint32_t Param_ADCS_Image_Sector_Start;
    uint32_t Param_ADCS_Image_Sector_End;
    uint32_t Param_Log_Sector_Start;
    uint32_t Param_Log_Sector_End;
    uint32_t Param_HK_Sector_Start;
    uint32_t Param_HK_Sector_End;

    /* Write and transmit data indicators */
    uint32_t Param_Beacon_Write_Start;
    uint32_t Param_Beacon_Read_Start;
    uint32_t Param_SciD_Write_Start;
    uint32_t Param_SciD_Read_Start;
    uint32_t Param_SciC_Write_Start;
    uint32_t Param_SciC_Read_Start;
    uint32_t Param_ADCS_Write_Start;
    uint32_t Param_ADCS_Read_Start;
    uint32_t Param_ADCS_Image_Write_Start;
    uint32_t Param_ADCS_Image_Read_Start;
    uint32_t Param_Log_Write_Start;
    uint32_t Param_Log_Read_Start;
    uint32_t Param_HK_Write_Start;
    uint32_t Param_HK_Read_Start;

    /* Subsystem configuration registers */
    uint8_t Param_SBAND_Encoder_Reg;

    /* Persistent commands data*/
    uint8_t Param_CMD_Forced_Mode;
    uint32_t Param_Force_Mode_Timer_Time;
    uint32_t Param_Force_Mode_Update_Rate_Time;

    uint8_t Param_Last_CMD_Rec_APID;
    uint8_t Param_Last_CMD_Rec_option1;
    uint8_t Param_Last_CMD_Rec_option2;
    uint8_t Param_CMD_Reject_Status;
    uint16_t Param_EPS_CMD_Timer_Time;
    uint16_t Param_DAXSS_Response_Timer_Time;
    uint16_t Param_Fletcher_code;

} Param_Table_t;


struct CCSDS_Max_Data_size_Packet
{
    struct CCSDS_Header ccsds_head;

    uint8_t data[CCSDS_MAX_DATA_SIZE];

    uint16_t Fletcher_code;
};

typedef struct CCSDS_Max_Data_size_Packet Param_table_packet1_t;
typedef struct Parameter_Table_Packet{

    struct CCSDS_Header param_head;

    uint8_t data[sizeof(Param_Table_t) - CCSDS_MAX_DATA_SIZE - 2];

    uint16_t Fletcher_code;

} Param_table_packet2_t;


typedef struct Transmit_Buffer_Manager{
	uint16_t Transmit_Length;
	uint16_t Total_Transmit_Length;
	uint16_t Transmit_Offset;
	uint8_t Transmit_Buffer_Index;
} Transmit_Buff_Manage_t;

typedef struct {
	uint8_t apid;
	uint8_t option1;
	uint8_t option2;
} Last_CMD_Rec_t;

/* Structs for Timers */
typedef struct Timer64 {
	uint64_t Start;
	uint64_t Time;
} Timer64_t;

typedef struct Timer32{
	uint32_t Start;
	uint32_t Time;
} Timer32_t;

typedef struct Timer16{
	uint16_t Start;
	uint16_t Time;
} Timer16_t;

typedef struct Timer8{
	uint8_t Start;
	uint8_t Time;
} Timer8_t;


typedef struct
{
    uint16_t CMD_Seq_Count;
    uint16_t Prev_CMD_Seq_Count;
    uint16_t Response_Length;
    uint16_t Response_Read;
    Timer16_t CMD_Period_Timer;
    Timer16_t Response_Limit_Timer;
    uint8_t Non_response_count;
    uint8_t GS_CMD_Length;
    uint8_t GS_CMD_Response_Length;
} Module_Sync_t;

typedef struct
{
    uint16_t CMD_Seq_Count;
    uint16_t Prev_CMD_Seq_Count;
    uint16_t Response_Length;
    uint16_t Response_Read;
} Module_Sync_Small_t;

GLOBAL struct Global_Variables {
   Timer16_t                   	ADCS_Boot_Wait_Timer;
   Module_Sync_t               	ADCS_Module_Sync;
   Last_CMD_Rec_t              	Last_CMD_Rec;
   uint8_t                     	CMD_Forced_Mode;
   Timer32_t                   	Force_Mode_Timer;
   Timer32_t                   	Force_Mode_Update_Rate;
   Timer32_t                   	Transmit_Delay;
   Timer32_t                   	Transmit_Duration;
   uint16_t                    	Transmit_Data_Flags;
   Timer16_t                   	DAXSS_Sci_Packet_Timer;
   Module_Sync_t               	DAXSS_Module_Sync;
   uint8_t                     	DAXSS_Enable_Wait;
   uint8_t                     	I2C_Error_Flag;
   uint8_t                     	Sat_Curr_Mode;
   uint8_t                     	Sat_Avoid_Mode;
   uint32_t                    	Timers_Started_Flag;
   uint32_t                    	Indication_Flags;
   uint16_t                    	Beacon_Packet_Seq_Counter;
   uint16_t                    	Science_Packet_Seq_Counter;
   uint16_t                    	ADCS_Packet_Seq_Counter;
   uint16_t                    	ADCS_IMG_Packet_Seq_Counter;
   uint16_t                    	Log_Packet_Seq_Counter;
   uint16_t                    	HK_Packet_Seq_Counter;
   uint16_t                    	Parameter_Table_Packet_Seq_Counter;
   uint16_t                    	Subsys_Response_Packet_Seq_Counter;
   uint8_t                     	Deps_Wait_Tumb_Flag;
   Timer32_t                   	PSLV_Wait_Timer;
   Timer32_t                   	Deployment_Wait_Timer;
   Timer16_t                   	Deployment_Duration_Timer;
   Timer32_t                   	HK_Timer;
   Timer32_t                   	Beac_Timer;
   Timer32_t                   	Beac_Trans_Timer;
   Timer32_t                   	ADCS_Pack_Timer;
   Timer32_t                   	Last_Command_Timer;
   Timer16_t                   	Watchdog_Signal_Timer;
   Timer32_t                   	RTC_Sync_Timer;
   uint8_t                     	UHF_Malfunction_Flags;
   uint8_t                     	ADCS_Malfunction_Flags;
   uint8_t                     	SBAND_Malfunction_Flags;
   uint8_t                     	DAXSS_Malfunction_Flags;
   uint8_t                     	Non_Response_Count_Limit;
   uint8_t                     	Subsystem_Restart_Limit;
   float                       	SBAND_Auto_Long_Beac1_i_Limit;
   float                       	SBAND_Auto_Long_Beac1_f_Limit;
   float                       	SBAND_Auto_Lat_Data1_i_Limit;
   float                       	SBAND_Auto_Lat_Data1_f_Limit;
   float                       	SBAND_Auto_Long_Data1_i_Limit;
   float                       	SBAND_Auto_Long_Data1_f_Limit;
   float                       	SBAND_Auto_Lat_Beac2_i_Limit;
   float                       	SBAND_Auto_Lat_Beac2_f_Limit;
   float                       	SBAND_Auto_Long_Beac2_i_Limit;
   float                       	SBAND_Auto_Long_Beac2_f_Limit;
   float                       	SBAND_Auto_Lat_Data2_i_Limit;
   float                       	SBAND_Auto_Lat_Data2_f_Limit;
   float                       	SBAND_Auto_Long_Data2_i_Limit;
   float                       	SBAND_Auto_Long_Data2_f_Limit;
   float                       	SBAND_Auto_Lat_Beac1_i_Limit;
   float                       	SBAND_Auto_Lat_Beac1_f_Limit;
   uint16_t                    	Phoe_Safe_Threshold;
   uint16_t                    	Safe_Phoe_Threshold;
   uint16_t                    	Safe_Char_Threshold;
   uint16_t                    	Char_Safe_Threshold;
   uint16_t                   	Char_SciD_Threshold;
   uint16_t                    	SciD_Char_Threshold;
   uint16_t                    	Char_SciC_Threshold;
   uint16_t                    	SciC_Char_Threshold;
   uint16_t                    	SP_Deployment_Stop_Volt_Threshold;
   float                       	De_tumble_Threshold;
   float                       	ADCS_Eclipse_Threshold;
   uint8_t                     	UHF_SC_Restart_Counter;
   uint8_t                     	UHF_VC_SC_Restart_Counter;
   uint8_t                     	ADCS_SC_Restart_Counter;
   uint8_t                     	ADCS_VC_SC_Restart_Counter;
   uint8_t                     	SBAND_SC_Restart_Counter;
   uint8_t                     	SBAND_VC_SC_Restart_Counter;
   uint8_t                     	DAXSS_SC_Restart_Counter;
   uint8_t                     	DAXSS_VC_SC_Restart_Counter;
   uint8_t                     	Flash_SPI_Tries_Limit;
   uint8_t                     	CMD_Persistant_Flags;
   uint32_t                    	Boot_Up_Counter;
   uint32_t                    	Beacon_Sector_Start;
   uint32_t                    	Beacon_Sector_End;
   uint32_t                    	SciC_Sector_Start;
   uint32_t                    	SciC_Sector_End;
   uint32_t                    	SciD_Sector_Start;
   uint32_t                    	SciD_Sector_End;
   uint32_t                    	ADCS_Sector_Start;
   uint32_t                    	ADCS_Sector_End;
   uint32_t                    	ADCS_Image_Sector_Start;
   uint32_t                    	ADCS_Image_Sector_End;
   uint32_t                    	Log_Sector_Start;
   uint32_t                    	Log_Sector_End;
   uint32_t                    	HK_Sector_Start;
   uint32_t                    	HK_Sector_End;
   uint32_t                    	Beacon_Write_Start;
   uint32_t                    	Beacon_Read_Start;
   uint32_t                    	SciC_Write_Start;
   uint32_t                   	SciC_Read_Start;
   uint32_t                    	SciD_Write_Start;
   uint32_t                    	SciD_Read_Start;
   uint32_t                    	ADCS_Write_Start;
   uint32_t                    	ADCS_Read_Start;
   uint32_t                    	ADCS_Image_Write_Start;
   uint32_t                    	ADCS_Image_Read_Start;
   uint32_t                    	Log_Write_Start;
   uint32_t                    	Log_Read_Start;
   uint32_t                    	HK_Write_Start;
   uint32_t                    	HK_Read_Start;
   Module_Sync_Small_t         	Transmit_Helper;
   Module_Sync_t               	EPS_Module_Sync;
   uint8_t                     	PWR_I2C_Error_Count[3];
   uint16_t                    	PWR_Fuel_Guage_Data[3];
   Module_Sync_t               	SBand_Module_Sync;
   uint16_t                    	Flash_SPI_Wait_Limit;
   Module_Sync_Small_t         	Param_Module_sync;
   Transmit_Buff_Manage_t 		Current_Transmit;
   Transmit_Buff_Manage_t 		Next_Transmit;
   Module_Sync_t               	UHF_Module_Sync;
   Module_Sync_Small_t         	UHF_TX_Module_Sync;
   uint8_t                     	SBAND_Encoder_Reg;
   uint8_t                     	SD_Clk_Div;
   uint8_t                     	Current_SD;
   uint8_t                     	Transmit_Completed_SBand;
   uint8_t                     	Transmit_Completed_UHF;
   uint16_t 					       Globals_Table_Packet_Seq_Counter;
   Module_Sync_Small_t			SD_FDRI_Module_Sync;
   Module_Sync_t				DAXSS_Response_Module_Sync;
} Globals;

typedef struct CCSDS_Max_Data_size_Packet Global_packet_Full_t;
typedef struct Global_Table_Packet{

    struct CCSDS_Header global_head;

    uint8_t data[sizeof(Globals) - 2*CCSDS_MAX_DATA_SIZE];

    uint16_t Fletcher_code;

} Global_packet_Last_t;


#endif /* MAIN_SCH_H_ */
